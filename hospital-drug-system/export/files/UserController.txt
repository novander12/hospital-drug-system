==========================================================================
鏂囦欢璺緞: C:\Users\15291\Desktop\hospital-drug-system\src\main\java\com\example\hospital\controller\UserController.java
==========================================================================

package com.example.hospital.controller;

import com.example.hospital.model.User;
import com.example.hospital.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> loginRequest) {
        String username = loginRequest.get("username");
        String password = loginRequest.get("password");
        
        System.out.println("尝试登录: 用户名=" + username + ", 密码长度=" + (password != null ? password.length() : 0));
        
        User user = userService.authenticate(username, password);
        
        if (user != null) {
            System.out.println("登录成功: " + user);
            Map<String, Object> response = createSuccessResponse("登录成功", user);
            return ResponseEntity.ok(response);
        } else {
            System.out.println("登录失败: 用户名或密码错误");
            return ResponseEntity.badRequest().body(createErrorResponse("用户名或密码错误"));
        }
    }

    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody User user) {
        // 检查用户名是否已存在
        if (userService.findByUsername(user.getUsername()) != null) {
            return ResponseEntity.badRequest().body(createErrorResponse("用户名已存在"));
        }
        
        // 使用Service层创建用户
        User savedUser = userService.createUser(user);
        
        Map<String, Object> response = createSuccessResponse("注册成功", savedUser);
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/check")
    public ResponseEntity<?> checkUser(@RequestParam String username) {
        User user = userService.findByUsername(username);
        if (user != null) {
            Map<String, Object> userData = new HashMap<>();
            userData.put("id", user.getId());
            userData.put("username", user.getUsername());
            userData.put("role", user.getRole());
            userData.put("passwordLength", user.getPassword().length());
            
            return ResponseEntity.ok(userData);
        } else {
            return ResponseEntity.badRequest().body(createErrorResponse("用户不存在"));
        }
    }
    
    /**
     * 创建成功响应
     */
    private Map<String, Object> createSuccessResponse(String message, Object data) {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", message);
        response.put("data", data);
        return response;
    }
    
    /**
     * 创建错误响应
     */
    private Map<String, Object> createErrorResponse(String message) {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "error");
        response.put("message", message);
        return response;
    }
} 
